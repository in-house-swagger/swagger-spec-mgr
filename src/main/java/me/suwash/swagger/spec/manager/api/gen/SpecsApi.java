/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package me.suwash.swagger.spec.manager.api.gen;

import me.suwash.swagger.spec.manager.model.gen.Spec;
import me.suwash.swagger.spec.manager.model.gen.Specs;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-08-08T21:14:16.911+09:00")

@Api(value = "specs", description = "the specs API")
public interface SpecsApi {

    @ApiOperation(value = "Add a new specification", notes = "", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/specs",
        produces = { "application/yaml" }, 
        consumes = { "application/yaml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addSpec(@ApiParam(value = "Specification object that needs to be add" ,required=true )  @Valid @RequestBody Spec body);


    @ApiOperation(value = "Add a specification with id", notes = "", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/specs/{specId}",
        produces = { "application/yaml" }, 
        consumes = { "application/x-www-form-urlencoded" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addSpecWithId(@ApiParam(value = "ID of specification that needs to be add",required=true ) @PathVariable("specId") String specId,@ApiParam(value = "Specification object that needs to be add" ,required=true )  @Valid @RequestBody Spec body);


    @ApiOperation(value = "Deletes a specification", notes = "", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Specification not found", response = Void.class) })
    
    @RequestMapping(value = "/specs/{specId}",
        produces = { "application/yaml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSpecById(@ApiParam(value = "Specification id to delete",required=true ) @PathVariable("specId") String specId);


    @ApiOperation(value = "Find specification by ID", notes = "Returns a single specification", response = Object.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Object.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Specification not found", response = Void.class) })
    
    @RequestMapping(value = "/specs/{specId}",
        produces = { "application/yaml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> getSpecById(@ApiParam(value = "ID of spec to return",required=true ) @PathVariable("specId") String specId);


    @ApiOperation(value = "Find all specifications", notes = "Returns all specifications", response = Specs.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Specs.class),
        @ApiResponse(code = 404, message = "Specification not found", response = Void.class) })
    
    @RequestMapping(value = "/specs",
        produces = { "application/yaml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Specs> getSpecs();


    @ApiOperation(value = "Update an existing specification", notes = "", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Specification not found", response = Void.class),
        @ApiResponse(code = 405, message = "Validation exception", response = Void.class) })
    
    @RequestMapping(value = "/specs/{specId}",
        produces = { "application/yaml" }, 
        consumes = { "application/yaml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateSpecWithId(@ApiParam(value = "ID of specification that needs to be update",required=true ) @PathVariable("specId") String specId,@ApiParam(value = "Specification object that needs to be update" ,required=true )  @Valid @RequestBody Spec body);

}
