/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */

package me.suwash.swagger.spec.manager.ws.api.gen;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import me.suwash.swagger.spec.manager.ws.model.gen.IdListApiModelGen;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen",
    date = "2017-08-08T21:14:16.911+09:00")
@Api(value = "specs", description = "Swagger Specification Management API")
public interface SpecsApi {

  @ApiOperation(value = "/specs GET", notes = "Returns all specifications",
      response = IdListApiModelGen.class, tags = {})
  @ApiResponses(value = {
      @ApiResponse(code = 200, message = "successful operation",
          response = IdListApiModelGen.class),
      @ApiResponse(code = 404, message = "Specification not found", response = Void.class)})
  @RequestMapping(value = "/specs", produces = {"application/json"}, method = RequestMethod.GET)
  ResponseEntity<Object> getSpecs(@ApiParam(value = "user name for commit") @RequestHeader(
      value = "X-Commit-User", required = false) final String commitUser);

  @ApiOperation(value = "/specs/{specId} GET", notes = "Returns a single specification",
      response = Object.class, tags = {})
  @ApiResponses(
      value = {@ApiResponse(code = 200, message = "successful operation", response = Object.class),
          @ApiResponse(code = 400, message = "Invalid input", response = Object.class),
          @ApiResponse(code = 404, message = "Specification not found", response = Void.class)})
  @RequestMapping(value = "/specs/{specId}", produces = {"application/x-yaml"},
      method = RequestMethod.GET)
  ResponseEntity<Object> getSpecById(
      @ApiParam(value = "user name for commit") @RequestHeader(value = "X-Commit-User",
          required = false) final String commitUser,
      @ApiParam(value = "ID of specification to return",
          required = true) @PathVariable("specId") final String specId);

  @ApiOperation(value = "/specs/{specId} POST", notes = "", response = Void.class, tags = {})
  @ApiResponses(
      value = {@ApiResponse(code = 400, message = "Invalid input", response = Object.class)})
  @RequestMapping(value = "/specs/{specId}", produces = {"application/x-yaml"},
      consumes = {"application/x-yaml", "application/json"}, method = RequestMethod.POST)
  ResponseEntity<Object> addSpecWithId(
      @ApiParam(value = "user name for commit") @RequestHeader(value = "X-Commit-User",
          required = false) final String commitUser,
      @ApiParam(value = "message for commit") @RequestHeader(value = "X-Commit-Message",
          required = false) final String commitMessage,
      @ApiParam(value = "ID of specification that needs to be add",
          required = true) @PathVariable("specId") final String specId,
      @ApiParam(value = "Specification object that needs to be add",
          required = true) @RequestBody final Object payload);

  @ApiOperation(value = "/specs/{specId} PUT", notes = "", response = Void.class, tags = {})
  @ApiResponses(
      value = {@ApiResponse(code = 400, message = "Invalid input", response = Object.class),
          @ApiResponse(code = 404, message = "Specification not found", response = Void.class)})
  @RequestMapping(value = "/specs/{specId}", produces = {"application/x-yaml"},
      consumes = {"application/x-yaml", "application/json"}, method = RequestMethod.PUT)
  ResponseEntity<Object> updateSpecWithId(
      @ApiParam(value = "user name for commit") @RequestHeader(value = "X-Commit-User",
          required = false) final String commitUser,
      @ApiParam(value = "ID of specification that needs to be update",
          required = true) @PathVariable("specId") final String specId,
      @ApiParam(value = "Specification object that needs to be update",
          required = true) @RequestBody final Object payload);

  @ApiOperation(value = "/specs/{specId} DELETE", notes = "", response = Void.class, tags = {})
  @ApiResponses(
      value = {@ApiResponse(code = 400, message = "Invalid input", response = Object.class),
          @ApiResponse(code = 404, message = "Specification not found", response = Void.class)})
  @RequestMapping(value = "/specs/{specId}", produces = {"application/x-yaml"},
      method = RequestMethod.DELETE)
  ResponseEntity<Object> deleteSpecById(
      @ApiParam(value = "user name for commit") @RequestHeader(value = "X-Commit-User",
          required = false) final String commitUser,
      @ApiParam(value = "ID of specification to delete",
          required = true) @PathVariable("specId") final String specId);

}
