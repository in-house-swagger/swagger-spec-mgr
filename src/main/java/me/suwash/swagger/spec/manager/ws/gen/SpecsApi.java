/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package me.suwash.swagger.spec.manager.ws.gen;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

import org.springframework.hateoas.Identifiable;
import org.springframework.hateoas.Link;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-08-08T21:14:16.911+09:00")
@Api(value = "specs", description = "Swagger Specification Management API")
public interface SpecsApi {

    @ApiOperation(value = "Find all specifications", notes = "Returns all specifications", response = Identifiable.class, tags = {})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Identifiable.class),
        @ApiResponse(code = 404, message = "Specification not found", response = Void.class)
    })
    @RequestMapping(value = "/specs",
        produces = {
            "application/json"
        },
        method = RequestMethod.GET)
    ResponseEntity<Identifiable<Link>> getSpecs(
        @ApiParam(value = "user name for scm commit") @RequestHeader(value = "x-scm-user", required = false) final String scmUser,
        @ApiParam(value = "email address for scm commit") @RequestHeader(value = "x-scm-email", required = false) final String scmEmail);

    @ApiOperation(value = "Find specification by ID", notes = "Returns a single specification", response = Object.class, tags = {})
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Object.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Specification not found", response = Void.class)
    })
    @RequestMapping(value = "/specs/{specId}",
        produces = {
            "application/x-yaml"
        },
        method = RequestMethod.GET)
    ResponseEntity<Object> getSpecById(
        @ApiParam(value = "user name for scm commit") @RequestHeader(value = "x-scm-user", required = false) final String scmUser,
        @ApiParam(value = "email address for scm commit") @RequestHeader(value = "x-scm-email", required = false) final String scmEmail,
        @ApiParam(value = "ID of specification to return", required = true) @PathVariable("specId") final String specId);

    @ApiOperation(value = "Add a specification with id", notes = "", response = Void.class, tags = {})
    @ApiResponses(value = {
        @ApiResponse(code = 405, message = "Invalid input", response = Void.class)
    })
    @RequestMapping(value = "/specs/{specId}",
        produces = {
            "application/x-yaml"
        },
        consumes = {
            "application/x-yaml",
            "application/json"
        },
        method = RequestMethod.POST)
    ResponseEntity<Object> addSpecWithId(
        @ApiParam(value = "user name for scm commit") @RequestHeader(value = "x-scm-user", required = false) final String scmUser,
        @ApiParam(value = "email address for scm commit") @RequestHeader(value = "x-scm-email", required = false) final String scmEmail,
        @ApiParam(value = "ID of specification that needs to be add", required = true) @PathVariable("specId") final String specId,
        @ApiParam(value = "Specification object that needs to be add", required = true) @RequestBody final Object payload);

    @ApiOperation(value = "Update an existing specification", notes = "", response = Void.class, tags = {})
    @ApiResponses(value = {
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Specification not found", response = Void.class),
        @ApiResponse(code = 405, message = "Validation exception", response = Void.class)
    })
    @RequestMapping(value = "/specs/{specId}",
        produces = {
            "application/x-yaml"
        },
        consumes = {
            "application/x-yaml",
            "application/json"
        },
        method = RequestMethod.PUT)
    ResponseEntity<Object> updateSpecWithId(
        @ApiParam(value = "user name for scm commit") @RequestHeader(value = "x-scm-user", required = false) final String scmUser,
        @ApiParam(value = "email address for scm commit") @RequestHeader(value = "x-scm-email", required = false) final String scmEmail,
        @ApiParam(value = "ID of specification that needs to be update", required = true) @PathVariable("specId") final String specId,
        @ApiParam(value = "Specification object that needs to be update", required = true) @RequestBody final Object payload);

    @ApiOperation(value = "Deletes a specification", notes = "", response = Void.class, tags = {})
    @ApiResponses(value = {
        @ApiResponse(code = 400, message = "Invalid ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Specification not found", response = Void.class)
    })
    @RequestMapping(value = "/specs/{specId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSpecById(
        @ApiParam(value = "user name for scm commit") @RequestHeader(value = "x-scm-user", required = false) final String scmUser,
        @ApiParam(value = "email address for scm commit") @RequestHeader(value = "x-scm-email", required = false) final String scmEmail,
        @ApiParam(value = "ID of specification to delete", required = true) @PathVariable("specId") final String specId);

}
